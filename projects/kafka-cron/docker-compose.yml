version: '2.1'
volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
      - "8999:8999"
    volumes:
      - ./kafka-jmx-config.yaml:/kafka-jmx-config.yaml
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OPTS: "-javaagent:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.17.2.jar=8999:/kafka-jmx-config.yaml"
    depends_on:
      - zoo1

  kafka-producer:
    image: kafka-producer
    container_name: kafka-producer
    build:
      dockerfile: ./producer/Dockerfile
    volumes:
      - ./producer/config:/config
    platform: linux/amd64
    depends_on:
      - kafka1
    command : [
      "--brokers", "kafka1:19092",
      "--topics", "topic1,topic2",
      "--clusters", "cluster-a,cluster-b"
    ]


  kafka-consumer-1:
    image: kafka-consumer
    container_name: kafka-consumer-1
    build:
      dockerfile: ./consumer/Dockerfile
    platform: linux/amd64
    depends_on:
      - kafka1
    ports:
      - "2112:2112"
    command : [
      "--brokers", "kafka1:19092",
      "--topics", "topic1,topic2",
      "--cluster", "cluster-a"
    ]

  kafka-consumer-2:
      image: kafka-consumer
      container_name: kafka-consumer-2
      build:
        dockerfile: ./consumer/Dockerfile
      platform: linux/amd64
      depends_on:
        - kafka1
      ports:
      - "2113:2112"
      command : [
        "--brokers", "kafka1:19092",
        "--topics", "topic1,topic2",
        "--cluster", "cluster-b"
      ]

  kafka-retry-consumer-1:
      image: kafka-consumer
      container_name: kafka-retry-consumer-1
      build:
        dockerfile: ./consumer/Dockerfile
      platform: linux/amd64
      depends_on:
        - kafka1
      ports:
        - "21121:2112"
      command : [
        "--brokers", "kafka1:19092",
        "--topics", "topic1,topic2",
        "--cluster", "cluster-a",
        "--retry" , "true"
      ]

  kafka-retry-consumer-2:
      image: kafka-consumer
      container_name: kafka-retry-consumer-2
      build:
        dockerfile: ./consumer/Dockerfile
      platform: linux/amd64
      depends_on:
        - kafka1
      ports:
        - "21131:2112"
      command : [
        "--brokers", "kafka1:19092",
        "--topics", "topic1,topic2",
        "--cluster", "cluster-b",
        "--retry" , "true"
      ]    

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    links:
      - alertmanager:alertmanager
    ports:
      - 9090:9090 
    depends_on:
      - kafka-consumer-1
      - kafka-consumer-2
      - kafka-retry-consumer-1
      - kafka-retry-consumer-2
 
  alertmanager:
    container_name: alertmanager
    hostname: alertmanager
    image: prom/alertmanager
    volumes:
      - ./alertmanager.conf:/etc/alertmanager/alertmanager.conf
    command:
      - '--config.file=/etc/alertmanager/alertmanager.conf'
    ports:
      - 9093:9093

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    volumes:
      - ./grafana/grafana_datasources.yml:/etc/grafana/provisioning/datasources/all.yaml
      - ./grafana/grafana_config.ini:/etc/grafana/config.ini
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000